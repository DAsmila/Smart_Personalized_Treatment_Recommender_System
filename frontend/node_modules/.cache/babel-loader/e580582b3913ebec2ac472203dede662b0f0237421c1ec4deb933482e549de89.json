{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\smart-treatment-system\\\\frontend\\\\src\\\\components\\\\PatientForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PatientForm({\n  onResult\n}) {\n  _s();\n  const [f, setF] = useState({\n    Pregnancies: 0,\n    Glucose: 120,\n    BloodPressure: 70,\n    SkinThickness: 20,\n    Insulin: 79,\n    BMI: 25.6,\n    DiabetesPedigreeFunction: 0.5,\n    Age: 30\n  });\n  const [loading, setLoading] = useState(false);\n  const [prediction, setPrediction] = useState(null);\n  const [probability, setProbability] = useState(null);\n  const handleChange = e => setF({\n    ...f,\n    [e.target.name]: Number(e.target.value)\n  });\n  const submit = async () => {\n    setLoading(true);\n    setPrediction(null);\n    try {\n      // 1Ô∏è‚É£ Call Flask ML API\n      const response = await fetch(\"http://127.0.0.1:5000/predict/diabetes\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(f)\n      });\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      const data = await response.json();\n      console.log(\"‚úÖ Flask response:\", data);\n      if (data && data.prediction !== undefined) {\n        const diagnosis = data.prediction === 1 ? \"ü©∫ Diabetes Detected\" : \"‚úÖ No Diabetes Detected\";\n        setPrediction(diagnosis);\n        setProbability(data.probability);\n        alert(`${diagnosis}\\nProbability: ${(data.probability * 100).toFixed(2)}%`);\n\n        // 2Ô∏è‚É£ Save the result to your Node.js backend\n        const backendResponse = await fetch(\"http://localhost:4000/api/patient-records\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}` // if you use auth\n          },\n          body: JSON.stringify({\n            name: localStorage.getItem(\"userName\") || \"Unknown Patient\",\n            age: f.Age,\n            condition: \"Diabetes\",\n            prediction: data.prediction === 1 ? \"Positive\" : \"Negative\",\n            probability: data.probability\n          })\n        });\n        const backendResult = await backendResponse.json();\n        console.log(\"‚úÖ Saved to backend:\", backendResult);\n\n        // Notify parent (App.js) to refresh view\n        onResult && onResult(backendResult);\n      } else {\n        alert(\"‚ö†Ô∏è No prediction returned from backend.\");\n      }\n    } catch (err) {\n      console.error(\"‚ùå Error:\", err);\n      alert(\"Error connecting to backend or ML service. Check console.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"patient-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uD83E\\uDE78 Diabetes Prediction Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-grid\",\n      children: Object.keys(f).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: key,\n          value: f[key],\n          onChange: handleChange,\n          type: \"number\",\n          step: \"any\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submit,\n      disabled: loading,\n      children: loading ? \"Predicting...\" : \"Predict\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), prediction && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"prediction-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Prediction Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [prediction, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 26\n        }, this), \"Probability: \", (probability * 100).toFixed(2), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(PatientForm, \"F+eqtLRzdAF8dfqzZxJDoCxDK/k=\");\n_c = PatientForm;\nvar _c;\n$RefreshReg$(_c, \"PatientForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","PatientForm","onResult","_s","f","setF","Pregnancies","Glucose","BloodPressure","SkinThickness","Insulin","BMI","DiabetesPedigreeFunction","Age","loading","setLoading","prediction","setPrediction","probability","setProbability","handleChange","e","target","name","Number","value","submit","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","console","log","undefined","diagnosis","alert","toFixed","backendResponse","Authorization","localStorage","getItem","age","condition","backendResult","err","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","key","onChange","type","step","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/admin/Desktop/smart-treatment-system/frontend/src/components/PatientForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function PatientForm({ onResult }) {\r\n  const [f, setF] = useState({\r\n    Pregnancies: 0,\r\n    Glucose: 120,\r\n    BloodPressure: 70,\r\n    SkinThickness: 20,\r\n    Insulin: 79,\r\n    BMI: 25.6,\r\n    DiabetesPedigreeFunction: 0.5,\r\n    Age: 30,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [prediction, setPrediction] = useState(null);\r\n  const [probability, setProbability] = useState(null);\r\n\r\n  const handleChange = (e) =>\r\n    setF({ ...f, [e.target.name]: Number(e.target.value) });\r\n\r\n  const submit = async () => {\r\n    setLoading(true);\r\n    setPrediction(null);\r\n\r\n    try {\r\n      // 1Ô∏è‚É£ Call Flask ML API\r\n      const response = await fetch(\"http://127.0.0.1:5000/predict/diabetes\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(f),\r\n      });\r\n\r\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\r\n\r\n      const data = await response.json();\r\n      console.log(\"‚úÖ Flask response:\", data);\r\n\r\n      if (data && data.prediction !== undefined) {\r\n        const diagnosis =\r\n          data.prediction === 1\r\n            ? \"ü©∫ Diabetes Detected\"\r\n            : \"‚úÖ No Diabetes Detected\";\r\n\r\n        setPrediction(diagnosis);\r\n        setProbability(data.probability);\r\n\r\n        alert(`${diagnosis}\\nProbability: ${(data.probability * 100).toFixed(2)}%`);\r\n\r\n        // 2Ô∏è‚É£ Save the result to your Node.js backend\r\n        const backendResponse = await fetch(\"http://localhost:4000/api/patient-records\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`, // if you use auth\r\n          },\r\n          body: JSON.stringify({\r\n            name: localStorage.getItem(\"userName\") || \"Unknown Patient\",\r\n            age: f.Age,\r\n            condition: \"Diabetes\",\r\n            prediction: data.prediction === 1 ? \"Positive\" : \"Negative\",\r\n            probability: data.probability,\r\n          }),\r\n        });\r\n\r\n        const backendResult = await backendResponse.json();\r\n        console.log(\"‚úÖ Saved to backend:\", backendResult);\r\n\r\n        // Notify parent (App.js) to refresh view\r\n        onResult && onResult(backendResult);\r\n      } else {\r\n        alert(\"‚ö†Ô∏è No prediction returned from backend.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"‚ùå Error:\", err);\r\n      alert(\"Error connecting to backend or ML service. Check console.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"patient-form\">\r\n      <h3>ü©∏ Diabetes Prediction Form</h3>\r\n\r\n      <div className=\"form-grid\">\r\n        {Object.keys(f).map((key) => (\r\n          <div key={key}>\r\n            <label>{key}</label>\r\n            <input\r\n              name={key}\r\n              value={f[key]}\r\n              onChange={handleChange}\r\n              type=\"number\"\r\n              step=\"any\"\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <button onClick={submit} disabled={loading}>\r\n        {loading ? \"Predicting...\" : \"Predict\"}\r\n      </button>\r\n\r\n      {prediction && (\r\n        <div className=\"prediction-result\">\r\n          <h4>Prediction Result:</h4>\r\n          <p>\r\n            {prediction} <br />\r\n            Probability: {(probability * 100).toFixed(2)}%\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}