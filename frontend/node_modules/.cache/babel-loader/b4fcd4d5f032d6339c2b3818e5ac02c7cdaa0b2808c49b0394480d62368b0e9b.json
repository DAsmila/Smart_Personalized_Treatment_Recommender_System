{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\smart-treatment-system\\\\frontend\\\\src\\\\components\\\\PatientForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PatientForm({\n  onResult\n}) {\n  _s();\n  const [f, setF] = useState({\n    Pregnancies: 0,\n    Glucose: 120,\n    BloodPressure: 70,\n    SkinThickness: 20,\n    Insulin: 79,\n    BMI: 25.6,\n    DiabetesPedigreeFunction: 0.5,\n    Age: 30\n  });\n  const [loading, setLoading] = useState(false);\n  const [prediction, setPrediction] = useState(null);\n  const [probability, setProbability] = useState(null);\n  const handleChange = e => setF({\n    ...f,\n    [e.target.name]: Number(e.target.value)\n  });\n  const submit = async () => {\n    setLoading(true);\n    setPrediction(null);\n    try {\n      // --- STEP 1: Send data to Flask ML Service ---\n      const mlResponse = await fetch(\"http://127.0.0.1:5000/predict/diabetes\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(f)\n      });\n      if (!mlResponse.ok) throw new Error(`HTTP error: ${mlResponse.status}`);\n      const data = await mlResponse.json();\n      console.log(\"‚úÖ Flask response:\", data);\n      if (data && data.prediction !== undefined) {\n        const diagnosis = data.prediction === 1 ? \"ü©∫ Diabetes Detected\" : \"‚úÖ No Diabetes Detected\";\n        setPrediction(diagnosis);\n        setProbability(data.probability);\n\n        // --- STEP 2: Save to Node.js backend for doctor view ---\n        const backendRes = await fetch(\"http://localhost:4000/api/patient-records\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}` // if using auth\n          },\n          body: JSON.stringify({\n            name: localStorage.getItem(\"name\") || \"Unknown Patient\",\n            age: f.Age,\n            condition: \"Diabetes\",\n            prediction: data.prediction === 1 ? \"Positive\" : \"Negative\",\n            probability: data.probability\n          })\n        });\n        const saved = await backendRes.json();\n        console.log(\"‚úÖ Saved to backend:\", saved);\n\n        // Inform parent component\n        onResult && onResult({\n          ...data,\n          success: true,\n          diagnosis\n        });\n        alert(`${diagnosis}\\nProbability: ${(data.probability * 100).toFixed(2)}%`);\n      } else {\n        alert(\"‚ö†Ô∏è No prediction returned from Flask backend.\");\n      }\n    } catch (err) {\n      console.error(\"‚ùå Error:\", err);\n      alert(\"Error connecting to Flask or backend. Check your terminals.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"patient-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uD83E\\uDE7A Diabetes Prediction Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-grid\",\n      children: Object.keys(f).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: key,\n          value: f[key],\n          onChange: handleChange,\n          type: \"number\",\n          step: \"any\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submit,\n      disabled: loading,\n      children: loading ? \"Predicting...\" : \"Predict\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), prediction && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"prediction-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Prediction Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [prediction, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 26\n        }, this), \"Probability: \", (probability * 100).toFixed(2), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(PatientForm, \"F+eqtLRzdAF8dfqzZxJDoCxDK/k=\");\n_c = PatientForm;\nvar _c;\n$RefreshReg$(_c, \"PatientForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","PatientForm","onResult","_s","f","setF","Pregnancies","Glucose","BloodPressure","SkinThickness","Insulin","BMI","DiabetesPedigreeFunction","Age","loading","setLoading","prediction","setPrediction","probability","setProbability","handleChange","e","target","name","Number","value","submit","mlResponse","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","console","log","undefined","diagnosis","backendRes","Authorization","localStorage","getItem","age","condition","saved","success","alert","toFixed","err","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","key","onChange","type","step","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/admin/Desktop/smart-treatment-system/frontend/src/components/PatientForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function PatientForm({ onResult }) {\r\n  const [f, setF] = useState({\r\n    Pregnancies: 0,\r\n    Glucose: 120,\r\n    BloodPressure: 70,\r\n    SkinThickness: 20,\r\n    Insulin: 79,\r\n    BMI: 25.6,\r\n    DiabetesPedigreeFunction: 0.5,\r\n    Age: 30,\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [prediction, setPrediction] = useState(null);\r\n  const [probability, setProbability] = useState(null);\r\n\r\n  const handleChange = (e) =>\r\n    setF({ ...f, [e.target.name]: Number(e.target.value) });\r\n\r\n  const submit = async () => {\r\n    setLoading(true);\r\n    setPrediction(null);\r\n\r\n    try {\r\n      // --- STEP 1: Send data to Flask ML Service ---\r\n      const mlResponse = await fetch(\"http://127.0.0.1:5000/predict/diabetes\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(f),\r\n      });\r\n\r\n      if (!mlResponse.ok) throw new Error(`HTTP error: ${mlResponse.status}`);\r\n\r\n      const data = await mlResponse.json();\r\n      console.log(\"‚úÖ Flask response:\", data);\r\n\r\n      if (data && data.prediction !== undefined) {\r\n        const diagnosis =\r\n          data.prediction === 1\r\n            ? \"ü©∫ Diabetes Detected\"\r\n            : \"‚úÖ No Diabetes Detected\";\r\n\r\n        setPrediction(diagnosis);\r\n        setProbability(data.probability);\r\n\r\n        // --- STEP 2: Save to Node.js backend for doctor view ---\r\n        const backendRes = await fetch(\r\n          \"http://localhost:4000/api/patient-records\",\r\n          {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${localStorage.getItem(\"token\")}`, // if using auth\r\n            },\r\n            body: JSON.stringify({\r\n              name: localStorage.getItem(\"name\") || \"Unknown Patient\",\r\n              age: f.Age,\r\n              condition: \"Diabetes\",\r\n              prediction: data.prediction === 1 ? \"Positive\" : \"Negative\",\r\n              probability: data.probability,\r\n            }),\r\n          }\r\n        );\r\n\r\n        const saved = await backendRes.json();\r\n        console.log(\"‚úÖ Saved to backend:\", saved);\r\n\r\n        // Inform parent component\r\n        onResult && onResult({\r\n          ...data,\r\n          success: true,\r\n          diagnosis,\r\n        });\r\n\r\n        alert(`${diagnosis}\\nProbability: ${(data.probability * 100).toFixed(2)}%`);\r\n      } else {\r\n        alert(\"‚ö†Ô∏è No prediction returned from Flask backend.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"‚ùå Error:\", err);\r\n      alert(\"Error connecting to Flask or backend. Check your terminals.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"patient-form\">\r\n      <h3>ü©∫ Diabetes Prediction Form</h3>\r\n\r\n      <div className=\"form-grid\">\r\n        {Object.keys(f).map((key) => (\r\n          <div key={key}>\r\n            <label>{key}</label>\r\n            <input\r\n              name={key}\r\n              value={f[key]}\r\n              onChange={handleChange}\r\n              type=\"number\"\r\n              step=\"any\"\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <button onClick={submit} disabled={loading}>\r\n        {loading ? \"Predicting...\" : \"Predict\"}\r\n      </button>\r\n\r\n      {prediction && (\r\n        <div className=\"prediction-result\">\r\n          <h4>Prediction Result:</h4>\r\n          <p>\r\n            {prediction} <br />\r\n            Probability: {(probability * 100).toFixed(2)}%\r\n          </p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}