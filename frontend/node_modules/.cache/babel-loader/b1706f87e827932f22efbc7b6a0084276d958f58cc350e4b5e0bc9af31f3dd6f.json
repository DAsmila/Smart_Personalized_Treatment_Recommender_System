{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\smart-treatment-system\\\\frontend\\\\src\\\\components\\\\PatientForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport api from \"../api/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PatientForm({\n  onResult\n}) {\n  _s();\n  const [f, setF] = useState({\n    Pregnancies: 0,\n    Glucose: 120,\n    BloodPressure: 70,\n    SkinThickness: 20,\n    Insulin: 79,\n    BMI: 25.6,\n    DiabetesPedigreeFunction: 0.5,\n    Age: 30\n  });\n  const [prediction, setPrediction] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const handleChange = e => setF({\n    ...f,\n    [e.target.name]: Number(e.target.value)\n  });\n  const submit = async () => {\n    setLoading(true);\n    setPrediction(null);\n    try {\n      const response = await fetch(\"http://localhost:4000/api/predict\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          features: f,\n          condition: \"diabetes\"\n        })\n      });\n      const data = await response.json();\n      console.log(\"Prediction Response:\", data);\n\n      // Display popup\n      if (data && data.prediction !== undefined) {\n        alert(`Prediction: ${data.prediction}`);\n        setPrediction(data.prediction);\n        onResult(data);\n      } else {\n        alert(\"No prediction received. Please check backend connection.\");\n      }\n    } catch (err) {\n      console.error(\"Prediction error:\", err);\n      alert(\"Error connecting to backend or ML service.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"patient-form\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Diabetes Prediction Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-grid\",\n      children: Object.keys(f).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: key\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: key,\n          value: f[key],\n          onChange: handleChange,\n          type: \"number\",\n          step: \"any\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submit,\n      disabled: loading,\n      children: loading ? \"Predicting...\" : \"Predict\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), prediction !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"prediction-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Prediction Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: prediction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(PatientForm, \"2OJTMotL5L3R93fe7ouOLaT/qwI=\");\n_c = PatientForm;\nvar _c;\n$RefreshReg$(_c, \"PatientForm\");","map":{"version":3,"names":["React","useState","api","jsxDEV","_jsxDEV","PatientForm","onResult","_s","f","setF","Pregnancies","Glucose","BloodPressure","SkinThickness","Insulin","BMI","DiabetesPedigreeFunction","Age","prediction","setPrediction","loading","setLoading","handleChange","e","target","name","Number","value","submit","response","fetch","method","headers","body","JSON","stringify","features","condition","data","json","console","log","undefined","alert","err","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","key","onChange","type","step","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/admin/Desktop/smart-treatment-system/frontend/src/components/PatientForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport api from \"../api/api\";\r\n\r\nexport default function PatientForm({ onResult }) {\r\n  const [f, setF] = useState({\r\n    Pregnancies: 0,\r\n    Glucose: 120,\r\n    BloodPressure: 70,\r\n    SkinThickness: 20,\r\n    Insulin: 79,\r\n    BMI: 25.6,\r\n    DiabetesPedigreeFunction: 0.5,\r\n    Age: 30,\r\n  });\r\n\r\n  const [prediction, setPrediction] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleChange = (e) =>\r\n    setF({ ...f, [e.target.name]: Number(e.target.value) });\r\n\r\n  const submit = async () => {\r\n    setLoading(true);\r\n    setPrediction(null);\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:4000/api/predict\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ features: f, condition: \"diabetes\" }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      console.log(\"Prediction Response:\", data);\r\n\r\n      // Display popup\r\n      if (data && data.prediction !== undefined) {\r\n        alert(`Prediction: ${data.prediction}`);\r\n        setPrediction(data.prediction);\r\n        onResult(data);\r\n      } else {\r\n        alert(\"No prediction received. Please check backend connection.\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Prediction error:\", err);\r\n      alert(\"Error connecting to backend or ML service.\");\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"patient-form\">\r\n      <h3>Diabetes Prediction Form</h3>\r\n      <div className=\"form-grid\">\r\n        {Object.keys(f).map((key) => (\r\n          <div key={key}>\r\n            <label>{key}</label>\r\n            <input\r\n              name={key}\r\n              value={f[key]}\r\n              onChange={handleChange}\r\n              type=\"number\"\r\n              step=\"any\"\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button onClick={submit} disabled={loading}>\r\n        {loading ? \"Predicting...\" : \"Predict\"}\r\n      </button>\r\n\r\n      {prediction !== null && (\r\n        <div className=\"prediction-result\">\r\n          <h4>Prediction Result:</h4>\r\n          <p>{prediction}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}                          "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,GAAG,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,eAAe,SAASC,WAAWA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAChD,MAAM,CAACC,CAAC,EAAEC,IAAI,CAAC,GAAGR,QAAQ,CAAC;IACzBS,WAAW,EAAE,CAAC;IACdC,OAAO,EAAE,GAAG;IACZC,aAAa,EAAE,EAAE;IACjBC,aAAa,EAAE,EAAE;IACjBC,OAAO,EAAE,EAAE;IACXC,GAAG,EAAE,IAAI;IACTC,wBAAwB,EAAE,GAAG;IAC7BC,GAAG,EAAE;EACP,CAAC,CAAC;EAEF,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACmB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMqB,YAAY,GAAIC,CAAC,IACrBd,IAAI,CAAC;IAAE,GAAGD,CAAC;IAAE,CAACe,CAAC,CAACC,MAAM,CAACC,IAAI,GAAGC,MAAM,CAACH,CAAC,CAACC,MAAM,CAACG,KAAK;EAAE,CAAC,CAAC;EAEzD,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzBP,UAAU,CAAC,IAAI,CAAC;IAChBF,aAAa,CAAC,IAAI,CAAC;IAEnB,IAAI;MACF,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;QAChEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,QAAQ,EAAE5B,CAAC;UAAE6B,SAAS,EAAE;QAAW,CAAC;MAC7D,CAAC,CAAC;MAEF,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClCC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEH,IAAI,CAAC;;MAEzC;MACA,IAAIA,IAAI,IAAIA,IAAI,CAACpB,UAAU,KAAKwB,SAAS,EAAE;QACzCC,KAAK,CAAC,eAAeL,IAAI,CAACpB,UAAU,EAAE,CAAC;QACvCC,aAAa,CAACmB,IAAI,CAACpB,UAAU,CAAC;QAC9BZ,QAAQ,CAACgC,IAAI,CAAC;MAChB,CAAC,MAAM;QACLK,KAAK,CAAC,0DAA0D,CAAC;MACnE;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZJ,OAAO,CAACK,KAAK,CAAC,mBAAmB,EAAED,GAAG,CAAC;MACvCD,KAAK,CAAC,4CAA4C,CAAC;IACrD,CAAC,SAAS;MACRtB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEjB,OAAA;IAAK0C,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAC3B3C,OAAA;MAAA2C,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjC/C,OAAA;MAAK0C,SAAS,EAAC,WAAW;MAAAC,QAAA,EACvBK,MAAM,CAACC,IAAI,CAAC7C,CAAC,CAAC,CAAC8C,GAAG,CAAEC,GAAG,iBACtBnD,OAAA;QAAA2C,QAAA,gBACE3C,OAAA;UAAA2C,QAAA,EAAQQ;QAAG;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACpB/C,OAAA;UACEqB,IAAI,EAAE8B,GAAI;UACV5B,KAAK,EAAEnB,CAAC,CAAC+C,GAAG,CAAE;UACdC,QAAQ,EAAElC,YAAa;UACvBmC,IAAI,EAAC,QAAQ;UACbC,IAAI,EAAC;QAAK;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACX,CAAC;MAAA,GARMI,GAAG;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASR,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACN/C,OAAA;MAAQuD,OAAO,EAAE/B,MAAO;MAACgC,QAAQ,EAAExC,OAAQ;MAAA2B,QAAA,EACxC3B,OAAO,GAAG,eAAe,GAAG;IAAS;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChC,CAAC,EAERjC,UAAU,KAAK,IAAI,iBAClBd,OAAA;MAAK0C,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAChC3C,OAAA;QAAA2C,QAAA,EAAI;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC3B/C,OAAA;QAAA2C,QAAA,EAAI7B;MAAU;QAAA8B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChB,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC5C,EAAA,CA7EuBF,WAAW;AAAAwD,EAAA,GAAXxD,WAAW;AAAA,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}